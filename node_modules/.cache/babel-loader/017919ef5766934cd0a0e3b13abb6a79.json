{"ast":null,"code":"var _jsxFileName = \"/Users/bmarshall/react-library/src/components/Modal/Modal.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from './Notification';\nimport Default from './Default';\nimport Loading from './Loading';\nimport { Portal } from '../';\nimport styles from './Modal.module.scss';\nimport classnames from 'classnames'; // TODO: Prevent Parent Scroll in Modal\n\nexport default class Modal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: this.props.isOpen\n    };\n\n    this.handleCloseModal = ev => {\n      ev.stopPropagation();\n\n      if ( // Close on overlay or close icon\n      ev.target.getAttribute('data-overlay') || ev.target.getAttribute('data-close')) {\n        this.setState({\n          isOpen: false\n        }); // Run onClose prop if it was passed.\n\n        this.props.onClose && this.props.onClose();\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isOpen !== this.props.isOpen) {\n      if (this.props.isOpen) {\n        document.addEventListener('click', this.handleCloseModal, false);\n      } else {\n        document.removeEventListener('click', this.handleCloseModal, false);\n      }\n\n      if (this.state.isOpen !== this.props.isOpen) {\n        this.setState({\n          isOpen: this.props.isOpen\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onClose && this.props.onClose();\n    document.removeEventListener('click', this.handleCloseModal, false);\n  }\n\n  render() {\n    const {\n      appendToID,\n      className\n    } = this.props;\n    const isOpen = this.props.isOpen || this.state.isOpen;\n    const overlayClassName = classnames(styles.overlay, {\n      [styles.appendTo]: appendToID,\n      [styles.hide]: !isOpen,\n      [className]: className\n    });\n    return React.createElement(Portal, {\n      appendToID: this.props.appendToID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: overlayClassName,\n      tabIndex: 0,\n      \"data-overlay\": true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(ModalType, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))));\n  }\n\n}\nModal.propTypes = {\n  children: PropTypes.node,\n  isOpen: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  onClose: PropTypes.func,\n  appendToID: PropTypes.string,\n  type: PropTypes.string // success, info, warning, error, default\n\n};\nModal.defaultProps = {\n  isOpen: true,\n  type: 'default'\n};\n\nconst ModalType = props => {\n  const {\n    type\n  } = props;\n\n  if (type === 'default') {\n    return React.createElement(Default, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  } else if (type === 'loading') {\n    return React.createElement(Loading, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(Notification, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/bmarshall/react-library/src/components/Modal/Modal.jsx"],"names":["React","PropTypes","Notification","Default","Loading","Portal","styles","classnames","Modal","Component","state","isOpen","props","handleCloseModal","ev","stopPropagation","target","getAttribute","setState","onClose","componentDidUpdate","prevProps","document","addEventListener","removeEventListener","componentWillUnmount","render","appendToID","className","overlayClassName","overlay","appendTo","hide","propTypes","children","node","bool","title","oneOfType","string","element","func","type","defaultProps","ModalType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from './Notification';\nimport Default from './Default';\nimport Loading from './Loading';\nimport { Portal } from '../';\nimport styles from './Modal.module.scss';\nimport classnames from 'classnames';\n\n// TODO: Prevent Parent Scroll in Modal\nexport default class Modal extends React.Component {\n    static propTypes = {\n        children: PropTypes.node,\n        isOpen: PropTypes.bool,\n        title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n        className: PropTypes.string,\n        onClose: PropTypes.func,\n        appendToID: PropTypes.string,\n        type: PropTypes.string // success, info, warning, error, default\n    };\n    static defaultProps = {\n        isOpen: true,\n        type: 'default'\n    };\n\n    state = {\n        isOpen: this.props.isOpen\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isOpen !== this.props.isOpen) {\n            if (this.props.isOpen) {\n                document.addEventListener('click', this.handleCloseModal, false);\n            } else {\n                document.removeEventListener('click', this.handleCloseModal, false);\n            }\n\n            if (this.state.isOpen !== this.props.isOpen) {\n                this.setState({\n                    isOpen: this.props.isOpen\n                });\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.onClose && this.props.onClose();\n        document.removeEventListener('click', this.handleCloseModal, false);\n    }\n\n    handleCloseModal = ev => {\n        ev.stopPropagation();\n        if (\n            // Close on overlay or close icon\n            ev.target.getAttribute('data-overlay') ||\n            ev.target.getAttribute('data-close')\n        ) {\n            this.setState({\n                isOpen: false\n            });\n\n            // Run onClose prop if it was passed.\n            this.props.onClose && this.props.onClose();\n        }\n    };\n\n    render() {\n        const { appendToID, className } = this.props;\n        const isOpen = this.props.isOpen || this.state.isOpen;\n        const overlayClassName = classnames(styles.overlay, {\n            [styles.appendTo]: appendToID,\n            [styles.hide]: !isOpen,\n            [className]: className\n        });\n\n        return (\n            <Portal appendToID={this.props.appendToID}>\n                <div className={overlayClassName} tabIndex={0} data-overlay={true}>\n                    <ModalType {...this.props} />\n                </div>\n            </Portal>\n        );\n    }\n}\n\nconst ModalType = props => {\n    const { type } = props;\n    if (type === 'default') {\n        return <Default {...props} />;\n    } else if (type === 'loading') {\n        return <Loading {...props} />;\n    } else {\n        return <Notification {...props} />;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}