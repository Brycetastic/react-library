{"ast":null,"code":"import React from 'react';\nimport Text from 'rsg-components/Text';\nimport Code from 'rsg-components/Code';\nimport { showSpaces, unquote } from './util';\nvar defaultValueBlacklist = ['null', 'undefined'];\nexport default function renderDefault(prop) {\n  // Workaround for issue https://github.com/reactjs/react-docgen/issues/221\n  // If prop has defaultValue it can not be required\n  if (prop.defaultValue) {\n    var defaultValueString = showSpaces(unquote(String(prop.defaultValue.value)));\n\n    if (prop.type || prop.flowType) {\n      var propName = prop.type ? prop.type.name : prop.flowType && prop.flowType.type;\n\n      if (defaultValueBlacklist.indexOf(prop.defaultValue.value) > -1) {\n        return React.createElement(Code, null, defaultValueString);\n      } else if (propName === 'func' || propName === 'function') {\n        return React.createElement(Text, {\n          size: \"small\",\n          color: \"light\",\n          underlined: true,\n          title: defaultValueString\n        }, \"Function\");\n      } else if (propName === 'shape' || propName === 'object') {\n        try {\n          // We eval source code to be able to format the defaultProp here. This\n          // can be considered safe, as it is the source code that is evaled,\n          // which is from a known source and safe by default\n          // eslint-disable-next-line no-eval\n          var object = eval(\"(\" + prop.defaultValue.value + \")\");\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: JSON.stringify(object, null, 2)\n          }, \"Shape\");\n        } catch (e) {\n          // eval will throw if it contains a reference to a property not in the\n          // local scope. To avoid any breakage we fall back to rendering the\n          // prop without any formatting\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: prop.defaultValue.value\n          }, \"Shape\");\n        }\n      }\n    }\n\n    return React.createElement(Code, null, defaultValueString);\n  } else if (prop.required) {\n    return React.createElement(Text, {\n      size: \"small\",\n      color: \"light\"\n    }, \"Required\");\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/bmarshall/react-library/node_modules/react-styleguidist/lib/client/rsg-components/Props/renderDefault.js"],"names":["React","Text","Code","showSpaces","unquote","defaultValueBlacklist","renderDefault","prop","defaultValue","defaultValueString","String","value","type","flowType","propName","name","indexOf","createElement","size","color","underlined","title","object","eval","JSON","stringify","e","required"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,QAApC;AACA,IAAIC,qBAAqB,GAAG,CAAC,MAAD,EAAS,WAAT,CAA5B;AACA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC1C;AACA;AACA,MAAIA,IAAI,CAACC,YAAT,EAAuB;AACrB,QAAIC,kBAAkB,GAAGN,UAAU,CAACC,OAAO,CAACM,MAAM,CAACH,IAAI,CAACC,YAAL,CAAkBG,KAAnB,CAAP,CAAR,CAAnC;;AAEA,QAAIJ,IAAI,CAACK,IAAL,IAAaL,IAAI,CAACM,QAAtB,EAAgC;AAC9B,UAAIC,QAAQ,GAAGP,IAAI,CAACK,IAAL,GAAYL,IAAI,CAACK,IAAL,CAAUG,IAAtB,GAA6BR,IAAI,CAACM,QAAL,IAAiBN,IAAI,CAACM,QAAL,CAAcD,IAA3E;;AAEA,UAAIP,qBAAqB,CAACW,OAAtB,CAA8BT,IAAI,CAACC,YAAL,CAAkBG,KAAhD,IAAyD,CAAC,CAA9D,EAAiE;AAC/D,eAAOX,KAAK,CAACiB,aAAN,CAAoBf,IAApB,EAA0B,IAA1B,EAAgCO,kBAAhC,CAAP;AACD,OAFD,MAEO,IAAIK,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,UAAxC,EAAoD;AACzD,eAAOd,KAAK,CAACiB,aAAN,CAAoBhB,IAApB,EAA0B;AAC/BiB,UAAAA,IAAI,EAAE,OADyB;AAE/BC,UAAAA,KAAK,EAAE,OAFwB;AAG/BC,UAAAA,UAAU,EAAE,IAHmB;AAI/BC,UAAAA,KAAK,EAAEZ;AAJwB,SAA1B,EAKJ,UALI,CAAP;AAMD,OAPM,MAOA,IAAIK,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,QAAzC,EAAmD;AACxD,YAAI;AACF;AACA;AACA;AACA;AACA,cAAIQ,MAAM,GAAGC,IAAI,CAAC,MAAMhB,IAAI,CAACC,YAAL,CAAkBG,KAAxB,GAAgC,GAAjC,CAAjB;AACA,iBAAOX,KAAK,CAACiB,aAAN,CAAoBhB,IAApB,EAA0B;AAC/BiB,YAAAA,IAAI,EAAE,OADyB;AAE/BC,YAAAA,KAAK,EAAE,OAFwB;AAG/BC,YAAAA,UAAU,EAAE,IAHmB;AAI/BC,YAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAJwB,WAA1B,EAKJ,OALI,CAAP;AAMD,SAZD,CAYE,OAAOI,CAAP,EAAU;AACV;AACA;AACA;AACA,iBAAO1B,KAAK,CAACiB,aAAN,CAAoBhB,IAApB,EAA0B;AAC/BiB,YAAAA,IAAI,EAAE,OADyB;AAE/BC,YAAAA,KAAK,EAAE,OAFwB;AAG/BC,YAAAA,UAAU,EAAE,IAHmB;AAI/BC,YAAAA,KAAK,EAAEd,IAAI,CAACC,YAAL,CAAkBG;AAJM,WAA1B,EAKJ,OALI,CAAP;AAMD;AACF;AACF;;AAED,WAAOX,KAAK,CAACiB,aAAN,CAAoBf,IAApB,EAA0B,IAA1B,EAAgCO,kBAAhC,CAAP;AACD,GA3CD,MA2CO,IAAIF,IAAI,CAACoB,QAAT,EAAmB;AACxB,WAAO3B,KAAK,CAACiB,aAAN,CAAoBhB,IAApB,EAA0B;AAC/BiB,MAAAA,IAAI,EAAE,OADyB;AAE/BC,MAAAA,KAAK,EAAE;AAFwB,KAA1B,EAGJ,UAHI,CAAP;AAID;;AAED,SAAO,EAAP;AACD","sourcesContent":["import \"core-js/modules/es.function.name\";\nimport React from 'react';\nimport Text from 'rsg-components/Text';\nimport Code from 'rsg-components/Code';\nimport { showSpaces, unquote } from './util';\nvar defaultValueBlacklist = ['null', 'undefined'];\nexport default function renderDefault(prop) {\n  // Workaround for issue https://github.com/reactjs/react-docgen/issues/221\n  // If prop has defaultValue it can not be required\n  if (prop.defaultValue) {\n    var defaultValueString = showSpaces(unquote(String(prop.defaultValue.value)));\n\n    if (prop.type || prop.flowType) {\n      var propName = prop.type ? prop.type.name : prop.flowType && prop.flowType.type;\n\n      if (defaultValueBlacklist.indexOf(prop.defaultValue.value) > -1) {\n        return React.createElement(Code, null, defaultValueString);\n      } else if (propName === 'func' || propName === 'function') {\n        return React.createElement(Text, {\n          size: \"small\",\n          color: \"light\",\n          underlined: true,\n          title: defaultValueString\n        }, \"Function\");\n      } else if (propName === 'shape' || propName === 'object') {\n        try {\n          // We eval source code to be able to format the defaultProp here. This\n          // can be considered safe, as it is the source code that is evaled,\n          // which is from a known source and safe by default\n          // eslint-disable-next-line no-eval\n          var object = eval(\"(\" + prop.defaultValue.value + \")\");\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: JSON.stringify(object, null, 2)\n          }, \"Shape\");\n        } catch (e) {\n          // eval will throw if it contains a reference to a property not in the\n          // local scope. To avoid any breakage we fall back to rendering the\n          // prop without any formatting\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: prop.defaultValue.value\n          }, \"Shape\");\n        }\n      }\n    }\n\n    return React.createElement(Code, null, defaultValueString);\n  } else if (prop.required) {\n    return React.createElement(Text, {\n      size: \"small\",\n      color: \"light\"\n    }, \"Required\");\n  }\n\n  return '';\n}"]},"metadata":{},"sourceType":"module"}