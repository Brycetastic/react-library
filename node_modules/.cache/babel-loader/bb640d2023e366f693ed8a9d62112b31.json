{"ast":null,"code":"var _jsxFileName = \"/Users/bmarshall/react-library/src/components/ToggleControl/ToggleControl.jsx\";\n\n/* eslint-disable react/button-has-type */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './ToggleControl.module.scss';\nexport default class ToggleControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      active: this.props.default ? this.props.default : this.props.labels[0].value\n    };\n\n    this.onChange = e => {\n      if (this.props.onChange) {\n        this.props.onChange(e);\n      }\n\n      this.setState({\n        active: e.target.value\n      });\n    };\n  }\n\n  render() {\n    const {\n      className,\n      labels,\n      small,\n      dark,\n      darkBtn,\n      disabled\n    } = this.props;\n    const wrapperClass = classnames(styles.wrapper, {\n      [styles.small]: small,\n      [styles.dark]: dark,\n      [styles.darkBtn]: darkBtn,\n      [className]: className,\n      [styles.disabled]: disabled\n    });\n    let value = this.props.value ? this.props.value : this.state.active;\n    return React.createElement(\"section\", {\n      className: wrapperClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, labels.map(item => React.createElement(Btn, {\n      key: item.value,\n      label: item,\n      isActive: item.value === value,\n      onClick: this.onChange,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst Btn = ({\n  label,\n  isActive,\n  onClick,\n  disabled\n}) => {\n  const btnClass = classnames(styles.button, {\n    [styles.inactive]: !isActive,\n    [styles.active]: isActive\n  });\n  return React.createElement(\"button\", {\n    onClick: e => onClick(e),\n    className: btnClass,\n    type: \"button\",\n    value: label.value,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, label.name);\n};\n\nToggleControl.propTypes = {\n  className: PropTypes.string,\n\n  /** Click Event method */\n  onChange: PropTypes.func,\n\n  /** value of label to be selected first by default */\n  default: PropTypes.string,\n\n  /** if you need this to be a controled component use value rather than default */\n  value: PropTypes.string,\n  labels: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.node,\n    value: PropTypes.string\n  })),\n  disabled: PropTypes.bool\n};\nBtn.propTypes = {\n  label: PropTypes.shape({\n    name: PropTypes.node,\n    value: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/bmarshall/react-library/src/components/ToggleControl/ToggleControl.jsx"],"names":["React","Component","PropTypes","classnames","styles","ToggleControl","state","active","props","default","labels","value","onChange","e","setState","target","render","className","small","dark","darkBtn","disabled","wrapperClass","wrapper","map","item","Btn","label","isActive","onClick","btnClass","button","inactive","name","propTypes","string","func","arrayOf","shape","node","bool"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './ToggleControl.module.scss';\n\nexport default class ToggleControl extends Component {\n    state = {\n        active: this.props.default ? this.props.default : this.props.labels[0].value\n    };\n\n    onChange = e => {\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n        this.setState({\n            active: e.target.value\n        });\n    };\n\n    render() {\n        const { className, labels, small, dark, darkBtn, disabled } = this.props;\n        const wrapperClass = classnames(styles.wrapper, {\n            [styles.small]: small,\n            [styles.dark]: dark,\n            [styles.darkBtn]: darkBtn,\n            [className]: className,\n            [styles.disabled]: disabled\n        });\n        let value = this.props.value ? this.props.value : this.state.active;\n\n        return (\n            <section className={wrapperClass}>\n                {labels.map(item => (\n                    <Btn\n                        key={item.value}\n                        label={item}\n                        isActive={item.value === value}\n                        onClick={this.onChange}\n                        disabled={disabled}\n                    />\n                ))}\n            </section>\n        );\n    }\n}\n\nconst Btn = ({ label, isActive, onClick, disabled }) => {\n    const btnClass = classnames(styles.button, {\n        [styles.inactive]: !isActive,\n        [styles.active]: isActive\n    });\n\n    return (\n        <button\n            onClick={e => onClick(e)}\n            className={btnClass}\n            type=\"button\"\n            value={label.value}\n            disabled={disabled}\n        >\n            {label.name}\n        </button>\n    );\n};\n\nToggleControl.propTypes = {\n    className: PropTypes.string,\n    /** Click Event method */\n    onChange: PropTypes.func,\n    /** value of label to be selected first by default */\n    default: PropTypes.string,\n    /** if you need this to be a controled component use value rather than default */\n    value: PropTypes.string,\n    labels: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.node,\n            value: PropTypes.string\n        })\n    ),\n    disabled: PropTypes.bool\n};\n\nBtn.propTypes = {\n    label: PropTypes.shape({\n        name: PropTypes.node,\n        value: PropTypes.string\n    }),\n    isActive: PropTypes.bool,\n    onClick: PropTypes.func,\n    disabled: PropTypes.bool\n};\n"]},"metadata":{},"sourceType":"module"}