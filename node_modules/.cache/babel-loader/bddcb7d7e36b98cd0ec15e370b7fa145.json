{"ast":null,"code":"var _jsxFileName = \"/Users/bmarshall/react-library/src/components/ToolTip/ToolTip.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { setPosition, pagePosition, toolTipPosition, isMobile } from './helpers/findLocations';\nimport TipDisplay from './TipDisplay';\nimport TargetDisplay from './TargetDisplay';\n/**\n * align box top or bottom and left, right, or center\n * with or without carrot\n * target is the child of ToolTip\n * tip is defined in \"tip\" prop\n * interaction can be on hover or click of target\n * options for color\n *\n * option to diplay:\n * horizontally (left or right)\n * or vertically (top or bottom)\n * from target. default is vertical\n * @author Bryce Marshall\n */\n\nclass ToolTip extends React.Component {\n  constructor(props) {\n    super();\n\n    this.onScrolling = () => {\n      this.setState({\n        active: false\n      });\n    };\n\n    this.clickTarget = e => {\n      e.preventDefault();\n      this.setState({\n        click: isMobile() || this.props.click\n      }, () => {\n        if (this.state.click) {\n          this.setState(prevState => ({\n            active: !prevState.active\n          }));\n        }\n      });\n    };\n\n    this.closeTip = e => {\n      if (e) {\n        e.preventDefault();\n      }\n\n      this.setState({\n        active: false,\n        inToolTip: false\n      });\n    };\n\n    this.enterTarget = e => {\n      e.stopPropagation();\n      this.setState({\n        click: isMobile() || this.props.click\n      }, () => {\n        if (!this.state.click) {\n          this.setState({\n            active: true\n          });\n        }\n      });\n    };\n\n    this.leaveTarget = () => {\n      setTimeout(() => {\n        if (this.state.active && !this.state.inToolTip) {\n          this.setState({\n            active: false,\n            vert: this.props.alignment[0]\n          });\n        }\n      }, 100);\n    };\n\n    this.enterTip = () => {\n      this.setState({\n        inToolTip: true\n      });\n    };\n\n    this.leaveTip = () => {\n      this.setState({\n        inToolTip: false\n      }, this.leaveTarget());\n    };\n\n    this.findTipPosition = () => {\n      const {\n        alignment,\n        horizontal\n      } = this.props;\n      let vert = alignment[0];\n      let target = this.targetRef.current.getBoundingClientRect();\n\n      if (target.width === 0) {\n        target = this.targetRef.current.children[0].getBoundingClientRect();\n      }\n\n      const tip = this.tipRef.current.getBoundingClientRect();\n      const page = pagePosition();\n      const toolTip = toolTipPosition(tip, target, vert, horizontal); // check to see if tool tip can fit in window if not switch alignment\n\n      if (vert !== 'top' && page.bot < toolTip.bot) {\n        vert = 'top';\n      } else if (vert === 'top' && page.top > toolTip.top) {\n        vert = 'bottom';\n      }\n\n      this.setState({\n        vert,\n        mobileView: isMobile()\n      }, () => {\n        this.setState(prevState => ({\n          toolTipStyle: setPosition(tip, target, prevState, horizontal)\n        }));\n      });\n    };\n\n    this.state = {\n      toolTipStyle: undefined,\n      inToolTip: false,\n      vert: props.alignment[0],\n      horz: props.alignment[1],\n      mobileView: false,\n      click: props.click\n    };\n    this.tipRef = React.createRef();\n    this.targetRef = React.createRef();\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.active !== this.state.active) {\n      if (this.state.active) {\n        this.findTipPosition();\n        document.addEventListener('click', this.handleClickOutside, true);\n        document.addEventListener('scroll', this.onScrolling, true);\n      } else if (!this.state.active) {\n        document.removeEventListener('scroll', this.onScrolling, true);\n        document.removeEventListener('click', this.handleClickOutside, true);\n        this.closeTip();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.onScrolling, true);\n    document.removeEventListener('click', this.handleClickOutside, true);\n    this.closeTip();\n  } // Throttle this scroll function to every 1s\n\n\n  handleClickOutside(event) {\n    if (this.tipRef && !this.tipRef.current.contains(event.target) || this.props.closeOnClick) {\n      setTimeout(() => {\n        this.closeTip(event);\n      }, 0);\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(TargetDisplay, Object.assign({}, this.props, {\n      click: this.state.click,\n      enterTarget: this.enterTarget,\n      leaveTarget: this.leaveTarget,\n      clickTarget: this.clickTarget,\n      targetRef: this.targetRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(TipDisplay, Object.assign({}, this.props, {\n      click: this.state.click,\n      alignment: [this.state.vert, this.state.horz],\n      enter: this.enterTip,\n      leave: this.leaveTip,\n      style: this.state.toolTipStyle,\n      tipRef: this.tipRef,\n      closeTip: this.closeTip,\n      active: this.state.active || this.state.inToolTip,\n      mobileView: this.state.mobileView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })));\n  }\n\n}\n\nToolTip.propTypes = {\n  /**\n   * if you want a click interaction rather then a hover\n   * @type {bool}\n   */\n  click: PropTypes.bool,\n\n  /**\n   * tool tip to display from target\n   * @type {bool}\n   */\n  horizontal: PropTypes.bool,\n\n  /**\n   * toolTip position from taret\n   * `alignment={[vertical, horizontal]}`\n   * @type {string}\n   */\n  alignment: PropTypes.arrayOf(PropTypes.oneOf(['top', 'bottom', 'right', 'center', 'left'])),\n  closeOnClick: PropTypes.bool\n};\nToolTip.defaultProps = {\n  alignment: ['bottom', 'center'],\n  click: false,\n  horizontal: false\n};\nexport default ToolTip;","map":{"version":3,"sources":["/Users/bmarshall/react-library/src/components/ToolTip/ToolTip.jsx"],"names":["React","PropTypes","setPosition","pagePosition","toolTipPosition","isMobile","TipDisplay","TargetDisplay","ToolTip","Component","constructor","props","onScrolling","setState","active","clickTarget","e","preventDefault","click","state","prevState","closeTip","inToolTip","enterTarget","stopPropagation","leaveTarget","setTimeout","vert","alignment","enterTip","leaveTip","findTipPosition","horizontal","target","targetRef","current","getBoundingClientRect","width","children","tip","tipRef","page","toolTip","bot","top","mobileView","toolTipStyle","undefined","horz","createRef","handleClickOutside","bind","componentDidUpdate","_","document","addEventListener","removeEventListener","componentWillUnmount","event","contains","closeOnClick","render","propTypes","bool","arrayOf","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { setPosition, pagePosition, toolTipPosition, isMobile } from './helpers/findLocations';\nimport TipDisplay from './TipDisplay';\nimport TargetDisplay from './TargetDisplay';\n\n/**\n * align box top or bottom and left, right, or center\n * with or without carrot\n * target is the child of ToolTip\n * tip is defined in \"tip\" prop\n * interaction can be on hover or click of target\n * options for color\n *\n * option to diplay:\n * horizontally (left or right)\n * or vertically (top or bottom)\n * from target. default is vertical\n * @author Bryce Marshall\n */\n\nclass ToolTip extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {\n            toolTipStyle: undefined,\n            inToolTip: false,\n            vert: props.alignment[0],\n            horz: props.alignment[1],\n            mobileView: false,\n            click: props.click\n        };\n\n        this.tipRef = React.createRef();\n        this.targetRef = React.createRef();\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidUpdate(_, prevState) {\n        if (prevState.active !== this.state.active) {\n            if (this.state.active) {\n                this.findTipPosition();\n                document.addEventListener('click', this.handleClickOutside, true);\n                document.addEventListener('scroll', this.onScrolling, true);\n            } else if (!this.state.active) {\n                document.removeEventListener('scroll', this.onScrolling, true);\n                document.removeEventListener('click', this.handleClickOutside, true);\n                this.closeTip();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('scroll', this.onScrolling, true);\n        document.removeEventListener('click', this.handleClickOutside, true);\n        this.closeTip();\n    }\n\n    // Throttle this scroll function to every 1s\n    onScrolling = () => {\n        this.setState({\n            active: false\n        });\n    };\n\n    clickTarget = e => {\n        e.preventDefault();\n\n        this.setState(\n            {\n                click: isMobile() || this.props.click\n            },\n            () => {\n                if (this.state.click) {\n                    this.setState(prevState => ({\n                        active: !prevState.active\n                    }));\n                }\n            }\n        );\n    };\n\n    closeTip = e => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            active: false,\n            inToolTip: false\n        });\n    };\n\n    enterTarget = e => {\n        e.stopPropagation();\n\n        this.setState(\n            {\n                click: isMobile() || this.props.click\n            },\n            () => {\n                if (!this.state.click) {\n                    this.setState({\n                        active: true\n                    });\n                }\n            }\n        );\n    };\n\n    leaveTarget = () => {\n        setTimeout(() => {\n            if (this.state.active && !this.state.inToolTip) {\n                this.setState({\n                    active: false,\n                    vert: this.props.alignment[0]\n                });\n            }\n        }, 100);\n    };\n\n    enterTip = () => {\n        this.setState({\n            inToolTip: true\n        });\n    };\n    leaveTip = () => {\n        this.setState(\n            {\n                inToolTip: false\n            },\n            this.leaveTarget()\n        );\n    };\n\n    findTipPosition = () => {\n        const { alignment, horizontal } = this.props;\n        let vert = alignment[0];\n\n        let target = this.targetRef.current.getBoundingClientRect();\n        if (target.width === 0) {\n            target = this.targetRef.current.children[0].getBoundingClientRect();\n        }\n        const tip = this.tipRef.current.getBoundingClientRect();\n\n        const page = pagePosition();\n        const toolTip = toolTipPosition(tip, target, vert, horizontal);\n\n        // check to see if tool tip can fit in window if not switch alignment\n        if (vert !== 'top' && page.bot < toolTip.bot) {\n            vert = 'top';\n        } else if (vert === 'top' && page.top > toolTip.top) {\n            vert = 'bottom';\n        }\n\n        this.setState(\n            {\n                vert,\n                mobileView: isMobile()\n            },\n            () => {\n                this.setState(prevState => ({\n                    toolTipStyle: setPosition(tip, target, prevState, horizontal)\n                }));\n            }\n        );\n    };\n\n    handleClickOutside(event) {\n        if ((this.tipRef && !this.tipRef.current.contains(event.target)) || this.props.closeOnClick) {\n            setTimeout(() => {\n                this.closeTip(event);\n            }, 0);\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <TargetDisplay\n                    {...this.props}\n                    click={this.state.click}\n                    enterTarget={this.enterTarget}\n                    leaveTarget={this.leaveTarget}\n                    clickTarget={this.clickTarget}\n                    targetRef={this.targetRef}\n                />\n                <TipDisplay\n                    {...this.props}\n                    click={this.state.click}\n                    alignment={[this.state.vert, this.state.horz]}\n                    enter={this.enterTip}\n                    leave={this.leaveTip}\n                    style={this.state.toolTipStyle}\n                    tipRef={this.tipRef}\n                    closeTip={this.closeTip}\n                    active={this.state.active || this.state.inToolTip}\n                    mobileView={this.state.mobileView}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nToolTip.propTypes = {\n    /**\n     * if you want a click interaction rather then a hover\n     * @type {bool}\n     */\n    click: PropTypes.bool,\n    /**\n     * tool tip to display from target\n     * @type {bool}\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * toolTip position from taret\n     * `alignment={[vertical, horizontal]}`\n     * @type {string}\n     */\n    alignment: PropTypes.arrayOf(PropTypes.oneOf(['top', 'bottom', 'right', 'center', 'left'])),\n    closeOnClick: PropTypes.bool\n};\n\nToolTip.defaultProps = {\n    alignment: ['bottom', 'center'],\n    click: false,\n    horizontal: false\n};\n\nexport default ToolTip;\n"]},"metadata":{},"sourceType":"module"}