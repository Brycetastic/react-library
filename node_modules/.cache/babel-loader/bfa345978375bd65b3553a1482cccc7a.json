{"ast":null,"code":"import React from 'react';\nimport Type from 'rsg-components/Type';\nimport Text from 'rsg-components/Text';\nimport { getType } from './util';\nexport function renderType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  var name = type.name;\n\n  switch (name) {\n    case 'arrayOf':\n      return type.value.name + \"[]\";\n\n    case 'objectOf':\n      return \"{\" + renderType(type.value) + \"}\";\n\n    case 'instanceOf':\n      return type.value;\n\n    default:\n      return name;\n  }\n}\n\nfunction renderComplexType(name, title) {\n  return React.createElement(Text, {\n    size: \"small\",\n    underlined: true,\n    title: title\n  }, name);\n}\n\nfunction renderFlowType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  switch (type.name) {\n    case 'enum':\n      return type.name;\n\n    case 'literal':\n      return type.value;\n\n    case 'signature':\n      return renderComplexType(type.type, type.raw);\n\n    case 'union':\n    case 'tuple':\n      return renderComplexType(type.name, type.raw);\n\n    default:\n      return type.raw || type.name;\n  }\n}\n\nexport default function renderTypeColumn(prop) {\n  var type = getType(prop);\n\n  if (!type) {\n    return null;\n  }\n\n  if (prop.flowType) {\n    return React.createElement(Type, null, renderFlowType(type));\n  }\n\n  return React.createElement(Type, null, renderType(type));\n}","map":{"version":3,"sources":["/Users/bmarshall/react-library/node_modules/react-styleguidist/lib/client/rsg-components/Props/renderType.js"],"names":["React","Type","Text","getType","renderType","type","name","value","renderComplexType","title","createElement","size","underlined","renderFlowType","raw","renderTypeColumn","prop","flowType"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,SAAP;AACD;;AAED,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;;AAEA,UAAQA,IAAR;AACE,SAAK,SAAL;AACE,aAAOD,IAAI,CAACE,KAAL,CAAWD,IAAX,GAAkB,IAAzB;;AAEF,SAAK,UAAL;AACE,aAAO,MAAMF,UAAU,CAACC,IAAI,CAACE,KAAN,CAAhB,GAA+B,GAAtC;;AAEF,SAAK,YAAL;AACE,aAAOF,IAAI,CAACE,KAAZ;;AAEF;AACE,aAAOD,IAAP;AAXJ;AAaD;;AAED,SAASE,iBAAT,CAA2BF,IAA3B,EAAiCG,KAAjC,EAAwC;AACtC,SAAOT,KAAK,CAACU,aAAN,CAAoBR,IAApB,EAA0B;AAC/BS,IAAAA,IAAI,EAAE,OADyB;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/BH,IAAAA,KAAK,EAAEA;AAHwB,GAA1B,EAIJH,IAJI,CAAP;AAKD;;AAED,SAASO,cAAT,CAAwBR,IAAxB,EAA8B;AAC5B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,SAAP;AACD;;AAED,UAAQA,IAAI,CAACC,IAAb;AACE,SAAK,MAAL;AACE,aAAOD,IAAI,CAACC,IAAZ;;AAEF,SAAK,SAAL;AACE,aAAOD,IAAI,CAACE,KAAZ;;AAEF,SAAK,WAAL;AACE,aAAOC,iBAAiB,CAACH,IAAI,CAACA,IAAN,EAAYA,IAAI,CAACS,GAAjB,CAAxB;;AAEF,SAAK,OAAL;AACA,SAAK,OAAL;AACE,aAAON,iBAAiB,CAACH,IAAI,CAACC,IAAN,EAAYD,IAAI,CAACS,GAAjB,CAAxB;;AAEF;AACE,aAAOT,IAAI,CAACS,GAAL,IAAYT,IAAI,CAACC,IAAxB;AAfJ;AAiBD;;AAED,eAAe,SAASS,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIX,IAAI,GAAGF,OAAO,CAACa,IAAD,CAAlB;;AAEA,MAAI,CAACX,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAIW,IAAI,CAACC,QAAT,EAAmB;AACjB,WAAOjB,KAAK,CAACU,aAAN,CAAoBT,IAApB,EAA0B,IAA1B,EAAgCY,cAAc,CAACR,IAAD,CAA9C,CAAP;AACD;;AAED,SAAOL,KAAK,CAACU,aAAN,CAAoBT,IAApB,EAA0B,IAA1B,EAAgCG,UAAU,CAACC,IAAD,CAA1C,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.function.name\";\nimport React from 'react';\nimport Type from 'rsg-components/Type';\nimport Text from 'rsg-components/Text';\nimport { getType } from './util';\nexport function renderType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  var name = type.name;\n\n  switch (name) {\n    case 'arrayOf':\n      return type.value.name + \"[]\";\n\n    case 'objectOf':\n      return \"{\" + renderType(type.value) + \"}\";\n\n    case 'instanceOf':\n      return type.value;\n\n    default:\n      return name;\n  }\n}\n\nfunction renderComplexType(name, title) {\n  return React.createElement(Text, {\n    size: \"small\",\n    underlined: true,\n    title: title\n  }, name);\n}\n\nfunction renderFlowType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  switch (type.name) {\n    case 'enum':\n      return type.name;\n\n    case 'literal':\n      return type.value;\n\n    case 'signature':\n      return renderComplexType(type.type, type.raw);\n\n    case 'union':\n    case 'tuple':\n      return renderComplexType(type.name, type.raw);\n\n    default:\n      return type.raw || type.name;\n  }\n}\n\nexport default function renderTypeColumn(prop) {\n  var type = getType(prop);\n\n  if (!type) {\n    return null;\n  }\n\n  if (prop.flowType) {\n    return React.createElement(Type, null, renderFlowType(type));\n  }\n\n  return React.createElement(Type, null, renderType(type));\n}"]},"metadata":{},"sourceType":"module"}