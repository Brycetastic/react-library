{"ast":null,"code":"var _jsxFileName = \"/Users/bmarshall/react-library/src/components/ToolTip/TipDisplay.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Icon } from '../';\nimport styles from './ToolTip.module.scss';\nimport carrot from './Carrot.module.scss';\nlet appendingTag = null; // define what tag to append the ToolTips\n\nappendingTag = document.body;\n\nconst TipDisplay = props => {\n  const boxClass = classnames(styles.toolTip, props.className, styles[props.color], {\n    [styles.low]: props.color === 'black',\n    [styles.large]: props.color !== 'black',\n    [styles.toolTipIn]: props.alignment,\n    [styles.toolTipOut]: !props.alignment,\n    [styles.hideTipDisplay]: !props.active\n  });\n  const carrotClass = classnames(carrot[props.alignment[0]], carrot[props.alignment[1]], carrot[props.color], {\n    [carrot.horizontal]: props.horizontal,\n    [carrot.vertical]: !props.horizontal\n  });\n  const toolTip = React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onMouseEnter: props.enter,\n    onMouseLeave: props.click ? null : props.leave,\n    className: boxClass,\n    style: props.style,\n    ref: props.tipRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, props.carrot && !props.mobileView ? React.createElement(\"div\", {\n    className: carrotClass,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }) : null, props.title ? React.createElement(TipTitle, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })) : null, React.createElement(\"div\", {\n    className: styles.tipContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.tip)), props.mobileView && props.active ?\n  /* eslint-disable-next-line jsx-a11y/click-events-have-key-events */\n  React.createElement(\"div\", {\n    onClick: props.closeTip,\n    className: styles.lightBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null);\n\n  if (process.env.__SERVER__ !== true && (props.toggleRender || props.active)) {\n    return ReactDOM.createPortal(toolTip, appendingTag);\n  }\n\n  return null;\n};\n\nconst TipTitle = ({\n  closeTip,\n  title,\n  mobileView\n}) => React.createElement(\"div\", {\n  className: styles.tipTitle,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}, mobileView ? React.createElement(Icon, {\n  name: \"exclamationCircle\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}) : null, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}, title), React.createElement(\"button\", {\n  onClick: closeTip,\n  type: \"button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, React.createElement(Icon, {\n  name: \"close\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n})));\n\nTipDisplay.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  // Style object could be anything\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  alignment: PropTypes.arrayOf(PropTypes.oneOf(['top', 'bottom', 'right', 'center', 'left'])),\n\n  /**\n   * tooltip element\n   * @type {node}\n   */\n  tip: PropTypes.node,\n  enter: PropTypes.func,\n  leave: PropTypes.func,\n  closeTip: PropTypes.func,\n  carrot: PropTypes.bool,\n  click: PropTypes.bool,\n  active: PropTypes.bool,\n  mobileView: PropTypes.bool,\n\n  /**\n   * hide and show with css or add and remove from page\n   * @type {bool}\n   */\n  toggleRender: PropTypes.bool,\n  // eslint-disable-next-line react/forbid-prop-types\n  tipRef: PropTypes.object,\n  title: PropTypes.string\n};\nTipTitle.propTypes = {\n  title: PropTypes.string,\n  closeTip: PropTypes.func,\n  mobileView: PropTypes.bool\n};\nTipDisplay.defaultProps = {\n  color: 'white',\n  carrot: true\n};\nexport default TipDisplay;","map":{"version":3,"sources":["/Users/bmarshall/react-library/src/components/ToolTip/TipDisplay.jsx"],"names":["React","ReactDOM","PropTypes","classnames","Icon","styles","carrot","appendingTag","document","body","TipDisplay","props","boxClass","toolTip","className","color","low","large","toolTipIn","alignment","toolTipOut","hideTipDisplay","active","carrotClass","horizontal","vertical","enter","click","leave","style","tipRef","mobileView","title","tipContent","tip","closeTip","lightBox","process","env","__SERVER__","toggleRender","createPortal","TipTitle","tipTitle","propTypes","string","object","arrayOf","oneOf","node","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Icon } from '../';\nimport styles from './ToolTip.module.scss';\nimport carrot from './Carrot.module.scss';\n\nlet appendingTag = null;\n// define what tag to append the ToolTips\nappendingTag = document.body;\n\nconst TipDisplay = props => {\n    const boxClass = classnames(styles.toolTip, props.className, styles[props.color], {\n        [styles.low]: props.color === 'black',\n        [styles.large]: props.color !== 'black',\n        [styles.toolTipIn]: props.alignment,\n        [styles.toolTipOut]: !props.alignment,\n        [styles.hideTipDisplay]: !props.active\n    });\n\n    const carrotClass = classnames(carrot[props.alignment[0]], carrot[props.alignment[1]], carrot[props.color], {\n        [carrot.horizontal]: props.horizontal,\n        [carrot.vertical]: !props.horizontal\n    });\n\n    const toolTip = (\n        <React.Fragment>\n            <div\n                onMouseEnter={props.enter}\n                onMouseLeave={props.click ? null : props.leave}\n                className={boxClass}\n                style={props.style}\n                ref={props.tipRef}\n            >\n                {props.carrot && !props.mobileView ? <div className={carrotClass} /> : null}\n                {props.title ? <TipTitle {...props} /> : null}\n\n                <div className={styles.tipContent}>{props.tip}</div>\n            </div>\n            {props.mobileView && props.active ? (\n                /* eslint-disable-next-line jsx-a11y/click-events-have-key-events */\n                <div onClick={props.closeTip} className={styles.lightBox} />\n            ) : null}\n        </React.Fragment>\n    );\n\n    if (process.env.__SERVER__ !== true && (props.toggleRender || props.active)) {\n        return ReactDOM.createPortal(toolTip, appendingTag);\n    }\n\n    return null;\n};\n\nconst TipTitle = ({ closeTip, title, mobileView }) => (\n    <div className={styles.tipTitle}>\n        {mobileView ? <Icon name=\"exclamationCircle\" /> : null}\n        <p>{title}</p>\n        <button onClick={closeTip} type=\"button\">\n            <Icon name=\"close\" />\n        </button>\n    </div>\n);\n\nTipDisplay.propTypes = {\n    className: PropTypes.string,\n    color: PropTypes.string,\n    // Style object could be anything\n    // eslint-disable-next-line react/forbid-prop-types\n    style: PropTypes.object,\n    alignment: PropTypes.arrayOf(PropTypes.oneOf(['top', 'bottom', 'right', 'center', 'left'])),\n    /**\n     * tooltip element\n     * @type {node}\n     */\n    tip: PropTypes.node,\n    enter: PropTypes.func,\n    leave: PropTypes.func,\n    closeTip: PropTypes.func,\n    carrot: PropTypes.bool,\n    click: PropTypes.bool,\n    active: PropTypes.bool,\n    mobileView: PropTypes.bool,\n    /**\n     * hide and show with css or add and remove from page\n     * @type {bool}\n     */\n    toggleRender: PropTypes.bool,\n    // eslint-disable-next-line react/forbid-prop-types\n    tipRef: PropTypes.object,\n    title: PropTypes.string\n};\n\nTipTitle.propTypes = {\n    title: PropTypes.string,\n    closeTip: PropTypes.func,\n    mobileView: PropTypes.bool\n};\n\nTipDisplay.defaultProps = {\n    color: 'white',\n    carrot: true\n};\n\nexport default TipDisplay;\n"]},"metadata":{},"sourceType":"module"}